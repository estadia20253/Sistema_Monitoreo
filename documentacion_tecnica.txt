DOCUMENTACIÓN TÉCNICA - SISTEMA DE MONITOREO WEB

1. DESCRIPCIÓN GENERAL DEL SISTEMA

El Sistema de Monitoreo Web es una aplicación web de dos niveles (frontend y backend) diseñada para el monitoreo de ecosistemas acuáticos del estado de Hidalgo. El sistema permite:

A los usuarios normales:
  Visualizar puntos de monitoreo en un mapa interactivo
  Ver detalles e imágenes de los puntos de monitoreo existentes
  Acceder mediante autenticación segura
  Recuperar su contraseña mediante preguntas secretas

A los administradores:
  Todas las funciones de usuarios normales
  Crear nuevos puntos de monitoreo en el mapa
  Subir y gestionar imágenes (máximo 10MB por imagen)
  Eliminar puntos de monitoreo existentes

2. ARQUITECTURA DEL SISTEMA

2.1 Estructura del Proyecto

Sistema_de_Monitoreo_web/
├── backend/                 # Servidor Python para procesamiento de datos
│   ├── app.py              # Aplicación principal del backend
│   ├── requirements.txt    # Dependencias del backend
│   ├── data/              # Datos del sistema
│   │   └── pines.json     # Almacenamiento de pines
│   ├── frontend/          # Servidor Node.js para la interfaz de usuario
│   ├── package.json       # Configuración y dependencias npm
│   ├── README_POSTGRESQL.md # Documentación de la base de datos
│   ├── server.js          # Servidor Express principal
│   ├── config/            # Configuraciones
│   │   ├── database.js    # Configuración de PostgreSQL
│   │   └── init-db.js     # Inicialización de la base de datos
│   ├── models/            # Modelos de datos
│   │   ├── User.js        # Modelo de usuario
│   │   └── Pin.js         # Modelo de pin
│   ├── public/            # Archivos estáticos
│   │   ├── styles.css     # Estilos globales
│   │   └── js/           # Scripts del cliente
│   │       ├── home.js    # Lógica de la página principal
│   │       ├── main.js    # Funciones principales
│   │       └── mapa.js    # Lógica del mapa interactivo
│   └── views/             # Plantillas EJS
│       ├── error.ejs      # Página de error
│       ├── forgot-password.ejs # Recuperación de contraseña
│       ├── index.ejs      # Página principal
│       ├── layout.ejs     # Plantilla base
│       ├── login.ejs      # Página de inicio de sesión
│       ├── mapa.ejs       # Vista del mapa
│       ├── register.ejs   # Página de registro
│       ├── reset-password.ejs # Cambio de contraseña
│       └── secret-question.ejs # Pregunta secreta
├── .git/                  # Control de versiones
├── .gitignore            # Archivos ignorados por git
├── .vscode/              # Configuración de VS Code
├── README.md             # Documentación principal
└── documentacion_tecnica.md/txt # Documentación técnica detallada

2.2 Stack Tecnológico

Frontend (Node.js):
  Express.js (v4) como framework web principal
  EJS para renderizado de vistas
  PostgreSQL para almacenamiento de usuarios y pines
  Bcrypt.js para hash de contraseñas
  Express-session para manejo de sesiones de usuario
  Multer para manejo de subida de imágenes (límite 10MB)
  Axios para comunicación con el backend
  CORS habilitado para comunicación segura

Backend (Python):
  Flask como servidor web ligero
  Flask-CORS para manejo de CORS
  PostgreSQL para persistencia de datos
  Sistema de archivos para almacenamiento temporal
  Migración automática de datos JSON a PostgreSQL

Características de Seguridad:
  Hash de contraseñas con bcrypt
  Sesiones seguras con secreto configurable
  Validación de datos en ambos lados
  Límite de intentos de recuperación de contraseña
  Control de acceso basado en roles (user/admin)

Base de Datos:
  PostgreSQL como base de datos principal
  Tablas:
  users: almacena usuarios y credenciales
  pins: almacena puntos de monitoreo
  Respaldo en JSON para recuperación

2.3 Base de Datos

Sistema de gestión: PostgreSQL
Tablas principales:
  users (gestión de usuarios)
  pins (puntos de monitoreo)

3. FUNCIONALIDADES PRINCIPALES


3.1 Sistema de Autenticación

Registro de usuarios con validación completa:
  Email único y formato válido
  Contraseña mínimo 8 caracteres
  Nombres y apellidos solo letras
  Pregunta y respuesta secreta obligatorias
  Aceptación de términos requerida

Inicio de sesión:
  Validación de email y contraseña
  Verificación de cuenta activa
  Registro de último acceso
  Redirección según rol de usuario

Recuperación de contraseña:
  Sistema de pregunta secreta
  Límite de 3 intentos por hora
  Token temporal de 15 minutos
  Validación de nueva contraseña

3.2 Gestión de Pines (Puntos de Monitoreo)

Visualización de pines:
  Mapa interactivo del estado de Hidalgo
  Información detallada por pin
  Galería de imágenes por punto
  Coordenadas precisas

Operaciones de administrador:
  Creación de nuevos pines con validación
  Carga de imágenes hasta 10MB
  Eliminación de pines
  Control total de imágenes

3.3 Características del Sistema

Interfaz responsiva y adaptable
Validación en tiempo real
Mensajes de error específicos
Logs detallados de operaciones
Manejo de sesiones seguro
Límites de tamaño en archivos
Validación de coordenadas geográficas
Backup automático de datos

4. SEGURIDAD

4.1 Medidas Implementadas

Hashing de contraseñas con bcrypt
Validación de datos en servidor y cliente
Protección contra inyección SQL
Control de acceso basado en roles
Sanitización de entradas de usuario
Límites de intentos de inicio de sesión

4.2 Manejo de Sesiones

Sesiones seguras con Express Session
Tiempo de expiración configurado
Almacenamiento seguro de tokens

5. APIs Y ENDPOINTS

5.1 Endpoints de Autenticación (Frontend - Express)

GET /login : Renderiza página de inicio de sesión
POST /login : Autenticación de usuario
  Parámetros: email, password
  Valida: cuenta activa, credenciales correctas
  Retorna: redirección a /mapa o error

GET /register : Renderiza página de registro
POST /register : Registro de nuevo usuario
  Parámetros: email, password, nombres, apellidos, pregunta secreta
  Valida: email único, formato correcto
  Retorna: redirección a /login o errores

GET /forgot-password : Formulario de recuperación
POST /forgot-password : Inicia recuperación
  Parámetros: email
  Límite: 3 intentos por hora
  Retorna: pregunta secreta o error

POST /verify-secret-answer : Verifica respuesta secreta
  Parámetros: email, respuesta
  Genera: token temporal (15 min)
  Retorna: formulario nueva contraseña o error

5.2 Endpoints de Gestión de Pines (Frontend)

GET /api/pines : Lista todos los pines
  Retorna: array de pines con coordenadas
  Incluye: información de BD + coordenadas backend

POST /api/pines : Crea nuevo pin (requiere admin)
  Parámetros: nombre, tipo, descripción, coordenadas
  Valida: datos requeridos, coordenadas válidas
  Retorna: pin creado con ID

PUT /api/pines/:id : Actualiza coordenadas
  Parámetros: latitud, longitud
  Valida: rango para Hidalgo
  Retorna: pin actualizado

DELETE /api/pines/:id : Elimina pin (requiere admin)
  Valida: existencia y permisos
  Ejecuta: eliminación en cascada

5.3 Endpoints de Imágenes (Backend - Flask)

GET /api/imagenes/:pinId : Obtiene imágenes de un pin
  Retorna: array de URLs de imágenes
  Timeout: 10 segundos

POST /api/imagenes : Sube nueva imagen (admin)
  Parámetros: imagen (multipart), pin_id
  Límite: 10MB por archivo
  Formatos: solo imágenes
  Timeout: 30 segundos

DELETE /api/imagenes/:imagenId : Elimina imagen
  Requiere: rol administrador
  Ejecuta: eliminación física del archivo
  Timeout: 10 segundos

6. CONFIGURACIÓN DEL ENTORNO

6.1 Variables de Entorno (.env)

Frontend:
PORT=3000                    # Puerto del servidor frontend
BACKEND_URL=http://localhost:5000   # URL del servidor backend
ADMIN_USER=admin            # Usuario administrador por defecto
ADMIN_PASS=admin123        # Contraseña admin por defecto

Base de Datos:
DB_HOST=localhost          # Host de PostgreSQL
DB_PORT=5432              # Puerto de PostgreSQL
DB_NAME=nombre_bd         # Nombre de la base de datos
DB_USER=usuario           # Usuario de PostgreSQL
DB_PASSWORD=contraseña    # Contraseña de PostgreSQL

6.2 Requisitos del Sistema

Servidor:
  Node.js v14 o superior (frontend)
  Python 3.8 o superior (backend)
  PostgreSQL 12 o superior
  512MB RAM mínimo
  1GB espacio en disco

Red:
  Puerto 3000 disponible (frontend)
  Puerto 5000 disponible (backend)
  Puerto 5432 disponible (PostgreSQL)

Navegadores Soportados:
  Google Chrome (recomendado)
  Mozilla Firefox
  Microsoft Edge
  Safari

6.3 Límites del Sistema

Archivos:
  Imágenes: máximo 10MB
  Formatos: solo imágenes (jpg, png, gif)

Base de Datos:
  Nombres: máximo 100 caracteres
  Descripciones: texto sin límite
  Coordenadas: validadas para Hidalgo
    Latitud: entre 19.6 y 21.4
    Longitud: entre -99.8 y -97.8

Seguridad:
  Sesiones: expiración 24 horas
  Contraseñas: mínimo 8 caracteres
  Reset password: token 15 minutos
  Intentos recuperación: 3 por hora

7. DESPLIEGUE

7.1 Pasos de Instalación

1. Clonar el repositorio
2. Instalar dependencias del frontend (npm install)
3. Instalar dependencias del backend (pip install -r requirements.txt)
4. Configurar variables de entorno
5. Inicializar la base de datos
6. Iniciar los servidores frontend y backend

7.2 Comandos de Inicio

# Iniciar Frontend
cd frontend
npm start

# Iniciar Backend
cd backend
python app.py

8. MANTENIMIENTO Y MONITOREO

8.1 Logs del Sistema

  Registro de inicios de sesión
  Registro de operaciones CRUD en pines
  Monitoreo de errores y excepciones

8.2 Backups

  Respaldo automático de base de datos
  Almacenamiento de imágenes
  Procedimientos de recuperación

9. CONSIDERACIONES DE ESCALABILIDAD

  Arquitectura modular para fácil expansión
  Separación clara de responsabilidades
  Posibilidad de implementar caché
  Optimización de consultas a base de datos

10. PROBLEMAS CONOCIDOS Y SOLUCIONES

10.1 Limitaciones Actuales

  Tamaño máximo de imágenes: 10MB
  Formato específico para coordenadas
  Requisitos específicos de contraseñas

10.2 Mejoras Futuras Planificadas

  Implementación de caché para mejora de rendimiento
  Sistema de notificaciones en tiempo real
  Exportación de datos en múltiples formatos
  Integración con sistemas externos

INFORMACIÓN DE CONTACTO Y SOPORTE

Desarrollador: Alan Gomez
Repositorio: https://github.com/AlanGomez0605/Sistema_de_Monitoreo_web
Versión: 1.0.0
Fecha de última actualización: 21 de Agosto, 2025
